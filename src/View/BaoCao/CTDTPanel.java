/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.BaoCao;

import DTOService.GeneralMethod;
import View.MainJFrame;
import controller.BaoCaoController.CTDTController;
import java.awt.Color;
import java.io.FileOutputStream;
import java.time.LocalDate;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.BaoCao.CTDT;
import model.BaoCao.KhachHangBC;
import model.File.Theme;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author choco
 */
public class CTDTPanel extends javax.swing.JPanel {

    GeneralMethod GM = new GeneralMethod();
    DefaultTableModel ctdtModel;
    CTDTController CC = new CTDTController();
    List<CTDT> listCTDT;

    /**
     * Creates new form CTDTPanel
     */
    public CTDTPanel() {
        initComponents();

        //khai set mau
        setColor();
        GM.setLabelIcon(iconPrint, MainJFrame.url + "print.png");
        GM.setLabelIcon(iconExcel, MainJFrame.url + "excel.png");
        ctdtModel = (DefaultTableModel) ctdtTable.getModel();
        formatBoxLoaiKhach(monthYearBox);
        formatBoxLoaiKhach(yearBox);
        String toDay = GM.dateToStr(LocalDate.now());

        fromDateText.setText(toDay);
        toDateText.setText(GM.dateToStr(LocalDate.now().plusDays(1)));
        for (int i = 1; i < 13; i++) {
            monthBox.addItem(i + "");
        }
        monthBox.setSelectedIndex(LocalDate.now().getMonthValue() - 1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ctdtTable = new javax.swing.JTable();
        fitterPanel = new javax.swing.JPanel();
        btnDay = new javax.swing.JButton();
        fromDateText = new javax.swing.JFormattedTextField();
        monthBox = new javax.swing.JComboBox<>();
        btnMonth = new javax.swing.JButton();
        btnYear = new javax.swing.JButton();
        yearBox = new javax.swing.JComboBox<>();
        monthYearBox = new javax.swing.JComboBox<>();
        toDateText = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnRemoveSelected = new javax.swing.JPanel();
        iconPrint = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnExcel = new javax.swing.JPanel();
        iconExcel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        ctdtTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Ngày nhập", "Ngày bán", "Khách hàng", "Loại khách", "Mã hàng", "Tên Hàng", "Dung tích", "Số lượng", "Giá nhập", "Giá xuất", "Doanh thu", "Lãi gộp", "Thanh toán", "NV"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ctdtTable);
        if (ctdtTable.getColumnModel().getColumnCount() > 0) {
            ctdtTable.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        fitterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lọc", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Dialog", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N

        btnDay.setText("Lọc");
        btnDay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnDayMousePressed(evt);
            }
        });

        try {
            fromDateText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        fromDateText.setToolTipText("Định dạng ngày: 25/03/2020");

        btnMonth.setText("Trong Tháng");
        btnMonth.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnMonthMousePressed(evt);
            }
        });

        btnYear.setText("Trong Năm");
        btnYear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnYearMousePressed(evt);
            }
        });

        try {
            toDateText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        toDateText.setToolTipText("Định dạng ngày: 25/03/2020");

        jLabel1.setText("Từ :");

        jLabel2.setText("Đến :");

        javax.swing.GroupLayout fitterPanelLayout = new javax.swing.GroupLayout(fitterPanel);
        fitterPanel.setLayout(fitterPanelLayout);
        fitterPanelLayout.setHorizontalGroup(
            fitterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fitterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fitterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fitterPanelLayout.createSequentialGroup()
                        .addComponent(yearBox, 0, 123, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnYear, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fitterPanelLayout.createSequentialGroup()
                        .addComponent(fromDateText)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addGroup(fitterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fitterPanelLayout.createSequentialGroup()
                        .addComponent(monthBox, 0, 58, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monthYearBox, 0, 73, Short.MAX_VALUE))
                    .addComponent(toDateText))
                .addGap(18, 18, 18)
                .addGroup(fitterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        fitterPanelLayout.setVerticalGroup(
            fitterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fitterPanelLayout.createSequentialGroup()
                .addGroup(fitterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDay)
                    .addComponent(toDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fitterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnYear)
                    .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthYearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMonth))
                .addGap(13, 13, 13))
        );

        btnRemoveSelected.setBackground(new java.awt.Color(179, 177, 177));
        btnRemoveSelected.setPreferredSize(new java.awt.Dimension(153, 88));
        btnRemoveSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnRemoveSelectedMousePressed(evt);
            }
        });

        iconPrint.setAlignmentX(0.5F);
        iconPrint.setPreferredSize(new java.awt.Dimension(53, 53));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Print");

        javax.swing.GroupLayout btnRemoveSelectedLayout = new javax.swing.GroupLayout(btnRemoveSelected);
        btnRemoveSelected.setLayout(btnRemoveSelectedLayout);
        btnRemoveSelectedLayout.setHorizontalGroup(
            btnRemoveSelectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(btnRemoveSelectedLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(iconPrint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        btnRemoveSelectedLayout.setVerticalGroup(
            btnRemoveSelectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnRemoveSelectedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iconPrint, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addContainerGap())
        );

        btnExcel.setBackground(new java.awt.Color(179, 177, 177));
        btnExcel.setPreferredSize(new java.awt.Dimension(153, 88));
        btnExcel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnExcelMousePressed(evt);
            }
        });

        iconExcel.setAlignmentX(0.5F);
        iconExcel.setPreferredSize(new java.awt.Dimension(53, 53));

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Xuất Excel");

        javax.swing.GroupLayout btnExcelLayout = new javax.swing.GroupLayout(btnExcel);
        btnExcel.setLayout(btnExcelLayout);
        btnExcelLayout.setHorizontalGroup(
            btnExcelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(btnExcelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(iconExcel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        btnExcelLayout.setVerticalGroup(
            btnExcelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnExcelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iconExcel, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fitterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnRemoveSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fitterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
       private void setColor() {
        Theme theme = MainJFrame.listTheme.get(0);
        monthBox.setBackground(Color.decode(theme.getBackgroundTextField()));
        monthYearBox.setBackground(Color.decode(theme.getBackgroundTextField()));
        yearBox.setBackground(Color.decode(theme.getBackgroundTextField()));
        btnDay.setBackground(Color.decode(theme.getBackgroundButton()));
        btnMonth.setBackground(Color.decode(theme.getBackgroundButton()));
        btnYear.setBackground(Color.decode(theme.getBackgroundButton()));
        ctdtTable.getTableHeader().setOpaque(false);
        ctdtTable.getTableHeader().setBackground(Color.decode(theme.getBackgroundTittleTable()));
        btnRemoveSelected.setBackground(Color.decode(theme.getBackgroundMainPanel()));
        btnExcel.setBackground(Color.decode(theme.getBackgroundMainPanel()));

        fitterPanel.setBackground(Color.decode(theme.getBackgroundMainPanel()));

        this.setBackground(Color.decode(theme.getBackgroundMainPanel()));

        btnRemoveSelected.setBackground(Color.decode(theme.getBackgroundMainPanel()));
        btnExcel.setBackground(Color.decode(theme.getBackgroundMainPanel()));
        jLabel1.setForeground(Color.decode(theme.getTxtColorTitle()));
        jLabel2.setForeground(Color.decode(theme.getTxtColorTitle()));
        jLabel7.setForeground(Color.decode(theme.getTxtColorTitle()));

        jLabel8.setForeground(Color.decode(theme.getTxtColorTitle()));

    }
    private void btnDayMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDayMousePressed
        try {
            if (listCTDT != null) {

                listCTDT.removeAll(listCTDT);
            }
            LocalDate fromDate = GM.strToDate(fromDateText.getText(), "dd/MM/yyyy");
            LocalDate toDate = GM.strToDate(toDateText.getText(), "dd/MM/yyyy");
            if (toDate.isAfter(fromDate) || toDate.isEqual(fromDate)) {
                listCTDT = CC.getCTDT(fromDate, toDate, null, null, null);
                if (listCTDT.size() > 0) {
                    showTable(listCTDT);
                } else {
                    JOptionPane.showMessageDialog(null, "Không có dữ liệu");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Không có dữ liệu");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Lỗi hệ thống");

        }
    }//GEN-LAST:event_btnDayMousePressed

    private void btnMonthMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMonthMousePressed
        try {
            if (listCTDT != null) {

                listCTDT.removeAll(listCTDT);
            }
            String month = monthBox.getSelectedItem().toString();
            String year = monthYearBox.getSelectedItem().toString();
            if (year.trim().length() > 0 && month.trim().length() > 0) {
                listCTDT = CC.getCTDT(null, null, null, month, year);
                if (listCTDT.size() > 0) {
                    showTable(listCTDT);
                } else {
                    JOptionPane.showMessageDialog(null, "Không có dữ liệu");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Kiểm tra lại tháng và năm");
            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Lỗi hệ thống");
        }
    }//GEN-LAST:event_btnMonthMousePressed

    private void btnYearMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnYearMousePressed
        try {
            if (listCTDT != null) {

                listCTDT.removeAll(listCTDT);
            }
            String year = yearBox.getSelectedItem().toString();
            if (year.trim().length() > 0) {
                listCTDT = CC.getCTDT(null, null, year, null, null);
                if (listCTDT.size() > 0) {
                    showTable(listCTDT);
                } else {
                    JOptionPane.showMessageDialog(null, "Không có dữ liệu");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Kiểm tra lại năm");
            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Lỗi hệ thống");
        }
    }//GEN-LAST:event_btnYearMousePressed

    private void btnRemoveSelectedMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveSelectedMousePressed
        //        setSelectedColor(btn_sold);
        //        resetColor(new JPanel[]{btnKho, btnKhachHang, btnCTDT});
    }//GEN-LAST:event_btnRemoveSelectedMousePressed

    private void btnExcelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExcelMousePressed
        // TODO add your handling code here:
        exportExcel(listCTDT);
    }//GEN-LAST:event_btnExcelMousePressed

    public void showTable(List<CTDT> list) {
        ctdtModel.setRowCount(0);
        int no = 1;
        for (CTDT lts : list) {
            ctdtModel.addRow(new Object[]{
                no++, lts.getDateIn(), lts.getDateOut(), lts.getKhachHang(), lts.getLoaiKhach(), lts.getCodeProduct(),
                lts.getTenHang(), lts.getCapacity(), lts.getSoLuong(), GM.doubleToDecimal(lts.getGiaNhap()), GM.doubleToDecimal(lts.getGiaXuat()),
                GM.doubleToDecimal(lts.getDoanhThu()), GM.doubleToDecimal(lts.getLaiGop()), lts.getThanhToan(), lts.getNhanVien()
            });
        }

    }

    public void formatBoxLoaiKhach(JComboBox box) {
        int year = LocalDate.now().getYear();
        box.removeAllItems();
        box.addItem(year);
        box.addItem(year - 1);
        box.addItem(year - 2);
        box.addItem(year - 3);
        box.setSelectedIndex(0);

    }

    public void exportExcel(List<CTDT> listCTDT) {
        JFileChooser excelFileChooser = new JFileChooser("C:\\Users\\"); //  duong dan
        excelFileChooser.setDialogTitle("Save As");
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showSaveDialog(null);

        if (excelChooser == JFileChooser.APPROVE_OPTION) {
            try {
                XSSFWorkbook workbook = new XSSFWorkbook();
                XSSFSheet spreadsheet = workbook.createSheet("CHI TIET DOANH THU");

                XSSFRow row = null;
                Cell cell = null;

                row = spreadsheet.createRow((short) 2);
                row.setHeight((short) 500);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("CHI TIET DOANH THU");

                row = spreadsheet.createRow((short) 3);
                row.setHeight((short) 500);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("STT");
                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue("Ngày Nhập");
                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue("Ngày Bán");
                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue("Khách Hàng");
                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue("Loại Khách");
                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue("Mã Hàng");
                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue("Tên Hàng");
                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue("Số Lượng");
                cell = row.createCell(8, CellType.STRING);
                cell.setCellValue("Dung tích");
                cell = row.createCell(9, CellType.STRING);
                cell.setCellValue("Giá Nhập");
                cell = row.createCell(10, CellType.STRING);
                cell.setCellValue("Giá Xuất");
                cell = row.createCell(11, CellType.STRING);
                cell.setCellValue("Doanh Thu");
                cell = row.createCell(12, CellType.STRING);
                cell.setCellValue("Lãi Gộp");
                cell = row.createCell(13, CellType.STRING);
                cell.setCellValue("Thanh Toán");
                cell = row.createCell(14, CellType.STRING);
                cell.setCellValue("Nhân Viên");

                for (int i = 0; i < listCTDT.size(); i++) {
                    CTDT ctdt = listCTDT.get(i);
                    row = spreadsheet.createRow((short) 4 + i);
                    row.setHeight((short) 400);
                    row.createCell(0).setCellValue(i + 1);
                    row.createCell(1).setCellValue(ctdt.getDateIn());
                    row.createCell(2).setCellValue(ctdt.getDateOut());
                    row.createCell(3).setCellValue(ctdt.getKhachHang());
                    row.createCell(4).setCellValue(ctdt.getLoaiKhach());
                    row.createCell(5).setCellValue(ctdt.getCodeProduct());
                    row.createCell(6).setCellValue(ctdt.getTenHang());
                    row.createCell(7).setCellValue(ctdt.getSoLuong());
                    row.createCell(8).setCellValue(ctdt.getCapacity());
                    row.createCell(9).setCellValue(ctdt.getGiaNhap());
                    row.createCell(10).setCellValue(ctdt.getGiaXuat());
                    row.createCell(11).setCellValue(ctdt.getDoanhThu());
                    row.createCell(12).setCellValue(ctdt.getLaiGop());
                    row.createCell(13).setCellValue(ctdt.getThanhToan());
                    row.createCell(14).setCellValue(ctdt.getNhanVien());
                }

                FileOutputStream out = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                workbook.write(out);
                JOptionPane.showMessageDialog(null, "Xuất file thành công");
                out.close();
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDay;
    private javax.swing.JPanel btnExcel;
    private javax.swing.JButton btnMonth;
    private javax.swing.JPanel btnRemoveSelected;
    private javax.swing.JButton btnYear;
    private javax.swing.JTable ctdtTable;
    private javax.swing.JPanel fitterPanel;
    private javax.swing.JFormattedTextField fromDateText;
    private javax.swing.JLabel iconExcel;
    private javax.swing.JLabel iconPrint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> monthBox;
    private javax.swing.JComboBox<String> monthYearBox;
    private javax.swing.JFormattedTextField toDateText;
    private javax.swing.JComboBox<String> yearBox;
    // End of variables declaration//GEN-END:variables
}
